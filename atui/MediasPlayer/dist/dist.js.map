{
  "version": 3,
  "sources": ["../src/main.js"],
  "sourcesContent": ["/*!\n * ATUI v0.4.0 (https://github.com/alcapitan/atui)\n * This code is released under GNU General Public License (https://github.com/alcapitan/atui/blob/dev/LICENSE.md)\n */\n\n/* Metadata */\n\nconst atuiMediasplayer_Metadata = {\n    name: \"Medias Player\",\n    author: \"alcapitan (on GitHub)\",\n    version: \"v0.4.0\",\n    website: \"https://github.com/alcapitan/atui\",\n    in_development: true,\n};\n// atuiKernel_MetadataDisplay(atuiMediasplayer_Metadata);\n\n/* Close Audioplayer */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Close\").forEach(function (button) {\n    button.addEventListener(\"click\", function () {\n        const player = findElement(\n            this,\n            \".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\",\n            \".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\"\n        );\n        const media = player.querySelector(\"audio, video\");\n        media.pause();\n        player.style.display = \"none\";\n    });\n});\n\n/* Display error for broken media link */\n\nfunction atuiMediasplayer_BrokenLink(player) {\n    const alertBox = document.createElement(\"div\");\n    alertBox.classList.add(\"atuiKernel_SectionBox\", \"optionAlert\");\n    const alertIcon = document.createElement(\"i\");\n    alertIcon.classList.add(\"ti\", \"ti-alert-circle\");\n    const alertText = document.createElement(\"p\");\n    alertText.innerHTML = \"ERROR : The media link is broken.\";\n    alertBox.appendChild(alertIcon);\n    alertBox.appendChild(alertText);\n    if (player.classList.contains(\"atuiMediasplayer_Videoplayer\")) {\n        player.querySelector(\"article\").prepend(alertBox);\n    } else {\n        player.prepend(alertBox);\n    }\n}\n\n/* Assign an audio to an audioplayer */\n\nfunction atuiMediasplayer_Assign(data) {\n    const player = document.getElementById(data[\"player\"]);\n    const media = player.querySelector(\"audio, video\");\n    const cover = player.querySelector(\".atuiMediasplayer_Cover img, .atuiMediasplayer_Cover i\");\n    const title = player.querySelector(\".atuiMediasplayer_InformationTitle\");\n    const author = player.querySelector(\".atuiMediasplayer_InformationAuthor\");\n    const albumName = player.querySelector(\".atuiMediasplayer_InformationAlbumName\");\n    const releaseDate = player.querySelector(\".atuiMediasplayer_InformationReleaseDate\");\n    const origin = player.querySelector(\".atuiMediasplayer_InformationOrigin\");\n\n    media.setAttribute(\"src\", data[\"media\"]);\n    if (data[\"cover\"] !== undefined) {\n        cover.setAttribute(\"src\", data[\"cover\"]);\n    }\n    if (data[\"title\"] !== undefined) {\n        title.innerHTML = data[\"title\"];\n    }\n    if (data[\"author\"] !== undefined) {\n        author.innerHTML = data[\"author\"];\n    }\n    if (data[\"albumName\"] !== undefined) {\n        albumName.innerHTML = data[\"albumName\"];\n    }\n    if (data[\"releaseDate\"] !== undefined) {\n        releaseDate.innerHTML = data[\"releaseDate\"];\n    }\n    if (data[\"origin\"] !== undefined) {\n        origin.setAttribute(\"href\", data[\"origin\"]);\n    }\n}\n\n/* Play and pause a media */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Run\").forEach(function (button) {\n    button.addEventListener(\"click\", function () {\n        let media;\n        if (this.getAttribute(\"data-mp-target\") !== null) {\n            media = document.querySelector(\n                `${this.getAttribute(\"data-mp-target\")} audio, ${this.getAttribute(\"data-mp-target\")} video`\n            );\n            button = findElement(\n                media,\n                \".atuiMediasplayer_Run\",\n                \".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\"\n            );\n            if (this.getAttribute(\"data-mp-assign\") !== null) {\n                const data = JSON.parse(this.getAttribute(\"data-mp-assign\"));\n                atuiMediasplayer_Assign(data);\n            }\n        } else {\n            media = findElement(this, \"audio, video\", \".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\");\n            button = this;\n        }\n        const player = findElement(\n            media,\n            \".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\",\n            \".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\"\n        );\n        const mediaLinkIsOk = verifyLink(media.getAttribute(\"src\"));\n        mediaLinkIsOk.then((response) => {\n            if (!response) {\n                atuiMediasplayer_BrokenLink(player);\n            }\n        });\n        if (media.paused === true) {\n            stopAllMedia();\n            media.play();\n            if (window.getComputedStyle(player).display === \"none\") {\n                player.style.display = \"block\";\n            }\n            button.classList.replace(\"ti-player-play\", \"ti-player-pause\");\n        } else if (media.paused === false) {\n            media.pause();\n            button.classList.replace(\"ti-player-pause\", \"ti-player-play\");\n        } else {\n            console.error(\"An unexpected error has occurred.\");\n        }\n    });\n});\n\n/* Manage when audio ends */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\").forEach((player) => {\n    const button = player.querySelector(\".atuiMediasplayer_Run\");\n    const media = player.querySelector(\"audio, video\");\n    media.addEventListener(\"ended\", () => {\n        button.classList.replace(\"ti-player-pause\", \"ti-player-play\");\n        if (player.classList.contains(\"optionFloating\")) {\n            player.style.display = \"none\";\n        }\n    });\n});\n\n/* Stop all others medias when playing a new one */\n\nfunction stopAllMedia() {\n    const medias = document.querySelectorAll(\"audio, video\");\n    medias.forEach(function (media) {\n        media.pause();\n    });\n    document.querySelectorAll(\".atuiMediasplayer_Run\").forEach(function (button) {\n        button.classList.replace(\"ti-player-pause\", \"ti-player-play\");\n    });\n}\n\n/* Update timer */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\").forEach((player) => {\n    const media = player.querySelector(\"audio, video\");\n    const timer = player.querySelector(\".atuiMediasplayer_Timer\");\n    const progressBar = player.querySelector(\".atuiMediasplayer_ProgressbarInside\");\n    media.addEventListener(\"timeupdate\", () => {\n        let listened = media.currentTime;\n        let duration = media.duration;\n        if (isNaN(duration)) {\n            (listened = 0), (duration = 0);\n        }\n        const percent = Math.round((listened / duration) * 100);\n        timer.innerText = `${convertTime(listened)} - ${convertTime(duration)}`;\n        progressBar.style.width = `${percent}%`;\n    });\n});\n\n/* Go forward or backward */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\").forEach((player) => {\n    const backward = player.querySelector(\".atuiMediasplayer_Backward\");\n    const forward = player.querySelector(\".atuiMediasplayer_Forward\");\n    const media = player.querySelector(\"audio, video\");\n    backward.addEventListener(\"click\", () => {\n        media.currentTime -= 10;\n    });\n    forward.addEventListener(\"click\", () => {\n        media.currentTime += 10;\n    });\n});\n\n/* Change playback */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Progressbar\").forEach((progressbar) => {\n    progressbar.addEventListener(\"click\", (event) => {\n        const media = findElement(\n            progressbar,\n            \"audio, video\",\n            \".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\"\n        );\n        const percent = (event.offsetX / progressbar.offsetWidth) * 100;\n        media.currentTime = (media.duration * percent) / 100;\n        progressbar.querySelector(\".atuiMediasplayer_ProgressbarInside\").style.width = `${percent}%`;\n    });\n});\n\n/* Infos */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Infos\").forEach(function (button) {\n    button.addEventListener(\"mouseenter\", function () {\n        atuiKernel_ToolsContextmenuDisplay(this, true, false);\n    });\n    button.addEventListener(\"mouseleave\", function () {\n        atuiKernel_ToolsContextmenuDisplay(this, false, undefined);\n    });\n});\n\n/* Loop */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Loop\").forEach(function (button) {\n    button.addEventListener(\"click\", function () {\n        const media = findElement(this, \"audio, video\", \".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\");\n        if (media.loop === false) {\n            media.loop = true;\n            this.classList.replace(\"ti-repeat\", \"ti-repeat-off\");\n        } else if (media.loop === true) {\n            media.loop = false;\n            this.classList.replace(\"ti-repeat-off\", \"ti-repeat\");\n        } else {\n            console.error(\"An unexpected error has occurred.\");\n        }\n    });\n});\n\n/* Sound */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Sound\").forEach(function (button) {\n    button.addEventListener(\"click\", function () {\n        const media = findElement(this, \"audio, video\", \".atuiMediasplayer_Audioplayer, .atuiMediasplayer_Videoplayer\");\n        if (media.muted === false) {\n            media.muted = true;\n            this.classList.replace(\"ti-volume\", \"ti-volume-off\");\n        } else if (media.muted === true) {\n            media.muted = false;\n            this.classList.replace(\"ti-volume-off\", \"ti-volume\");\n        } else {\n            console.error(\"An unexpected error has occurred.\");\n        }\n    });\n});\n\n/* Fullscreen */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Fullscreen\").forEach((button) => {\n    button.addEventListener(\"click\", () => {\n        const media = findElement(button, \"video\", \".atuiMediasplayer_Videoplayer\");\n        if (media.requestFullscreen) {\n            media.requestFullscreen();\n        } else if (media.webkitRequestFullscreen) {\n            media.webkitRequestFullscreen();\n        } else {\n            console.error(\"The browser does not support fullscreen mode.\");\n            return;\n        }\n    });\n});\n\n/* Picture in picture */\n\ndocument.querySelectorAll(\".atuiMediasplayer_Pip\").forEach((button) => {\n    button.addEventListener(\"click\", () => {\n        const media = findElement(button, \"video\", \".atuiMediasplayer_Videoplayer\");\n        if (media !== document.pictureInPictureElement) {\n            media.requestPictureInPicture();\n        } else {\n            document.exitPictureInPicture();\n        }\n    });\n});\n"],
  "mappings": "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",
  "names": ["atuiMediasplayer_Metadata", "name", "author", "version", "website", "in_development", "document", "querySelectorAll", "forEach", "button", "addEventListener", "player", "findElement", "querySelector", "pause", "style", "display", "atuiMediasplayer_BrokenLink", "alertBox", "createElement", "classList", "add", "alertIcon", "alertText", "innerHTML", "appendChild", "contains", "prepend", "atuiMediasplayer_Assign", "data", "getElementById", "media", "cover", "title", "albumName", "releaseDate", "origin", "setAttribute", "undefined", "getAttribute", "JSON", "parse", "verifyLink", "then", "response", "paused", "stopAllMedia", "play", "window", "getComputedStyle", "replace", "console", "error", "timer", "progressBar", "listened", "currentTime", "duration", "isNaN", "percent", "Math", "round", "innerText", "convertTime", "width", "backward", "forward", "progressbar", "event", "offsetX", "offsetWidth", "atuiKernel_ToolsContextmenuDisplay", "loop", "muted", "requestFullscreen", "webkitRequestFullscreen", "pictureInPictureElement", "requestPictureInPicture", "exitPictureInPicture"]
}
